package services

import (
	"context"
	"resource-mgmt/config"
	"resource-mgmt/models"

	"gorm.io/gorm"
)

type UserService struct {
	db *gorm.DB
}

func NewUserService() *UserService {
	return &UserService{
		db: config.DB,
	}
}

// GetUserByID retrieves a user by ID
func (s *UserService) GetUserByID(ctx context.Context, id string) (*models.GlobalUser, error) {
	var user models.GlobalUser
	err := s.db.WithContext(ctx).Where("id = ? AND deleted_at IS NULL", id).First(&user).Error
	if err != nil {
		return nil, err
	}
	return &user, nil
}

// GetUserByEmail retrieves a user by email
func (s *UserService) GetUserByEmail(ctx context.Context, email string) (*models.GlobalUser, error) {
	var user models.GlobalUser
	err := s.db.WithContext(ctx).Where("email = ? AND deleted_at IS NULL", email).First(&user).Error
	if err != nil {
		return nil, err
	}
	return &user, nil
}

// CreateUser creates a new user
func (s *UserService) CreateUser(ctx context.Context, req *models.CreateUserRequest) (*models.GlobalUser, error) {
	user := &models.GlobalUser{
		Email: req.Email,
		Name: req.Name,
		Password: req.Password, // Should be hashed before calling this
	}
	err := s.db.WithContext(ctx).Create(user).Error
	if err != nil {
		return nil, err
	}
	return user, nil
}

// UpdateUser updates an existing user
func (s *UserService) UpdateUser(user *models.GlobalUser) error {
	return s.db.Save(user).Error
}

// ChangePassword updates a user's password
func (s *UserService) ChangePassword(userID, newPasswordHash string) error {
	return s.db.Model(&models.GlobalUser{}).Where("id = ?", userID).Update("password_hash", newPasswordHash).Error
}